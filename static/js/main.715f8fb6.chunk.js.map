{"version":3,"sources":["comonents/layout/signuplink.js","comonents/layout/logedinlink.js","comonents/layout/navbar.js","comonents/dashboard/hotellists.js","comonents/dashboard/hotels.js","comonents/item/itemsummary.js","comonents/item/itemlist.js","pages/restaurant.js","pages/form.js","App.js","serviceWorker.js","index.js"],"names":["Signuplink","to","logedinlink","Navbar","Hotellists","hotels","React","Component","Itemsummary","Itemlist","Restaurant","props","console","log","Form","state","value","handleChange","bind","handleSubmit","event","this","setState","target","alert","preventDefault","onSubmit","type","onChange","App","className","exact","path","component","Hotels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAeeA,G,MAXI,WACf,OACI,6BACI,8BAAM,kBAAC,IAAD,CAASC,GAAG,KAAZ,UACN,8BAAM,kBAAC,IAAD,CAASA,GAAG,WAAZ,WACN,gCCKGC,EAXK,WAChB,OACI,6BACI,8BAAM,kBAAC,IAAD,CAASD,GAAG,KAAZ,WACN,8BAAM,kBAAC,IAAD,CAASA,GAAG,SAAZ,SACN,8BAAM,kBAAC,IAAD,CAASA,GAAG,YAAZ,cCOHE,EAVA,WACX,OACI,6BACI,wCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,6BCIGC,EAVI,WACf,OACI,6BACI,uCACA,yCCMGC,E,uKAVT,OACG,6BACG,wDACA,kBAAC,EAAD,W,GALSC,IAAMC,WCYZC,E,uKAVT,OACG,6BACG,iD,GAJcF,IAAMC,WCajBE,E,uKAVT,OACG,6BACG,qDACA,kBAAC,EAAD,W,GALWH,IAAMC,WCSdG,EAVE,SAACC,GAEf,OADAC,QAAQC,IAAIF,GAET,6BACG,8DACA,kBAAC,EAAD,Q,QCsBMG,E,kDA1BX,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,yDAONE,GACTC,KAAKC,SAAS,CAAEN,MAAOI,EAAMG,OAAOP,U,mCAG3BI,GACTI,MAAM,yBAA2BH,KAAKN,MAAMC,OAC5CI,EAAMK,iBACNb,QAAQC,IAAIQ,KAAKN,S,+BAGjB,OACI,0BAAMW,SAAUL,KAAKF,cACjB,2BAAOQ,KAAK,OAAOX,MAAQK,KAAKN,MAAMC,MAAOY,SAAUP,KAAKJ,eAC5D,2BAAOU,KAAK,SAASX,MAAM,gB,GArBxBV,IAAMC,WCiCVsB,MAzBf,WACE,OACE,oCACA,kBAAC,IAAD,KACA,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,CAAM7B,GAAG,eAAT,QAAkC,6BAClC,kBAAC,IAAD,CAAMA,GAAG,KAAT,SAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,QAAQC,UAAWnB,IACrC,kBAAC,IAAD,CAAOkB,KAAK,kBAAkBC,UAAWvB,SCb7ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.715f8fb6.chunk.js","sourcesContent":["import React from \"react\"\nimport {NavLink} from 'react-router-dom'\n\n\nconst Signuplink = ()=>{\n    return(\n        <div>\n            <span><NavLink to='/'>Login</NavLink></span>\n            <span><NavLink to='/signup'>Signup</NavLink></span>\n            <hr></hr>\n\n        </div>\n    )\n}\n\nexport default Signuplink","import React from \"react\"\nimport {NavLink} from 'react-router-dom'\n\nconst logedinlink = ()=>{\n    return(\n        <div>\n            <span><NavLink to='/'>logout</NavLink></span>\n            <span><NavLink to='/cart'>cart</NavLink></span>\n            <span><NavLink to='/profile'>profile</NavLink></span>\n            \n        </div>\n    )\n}\n\nexport default logedinlink","import React from \"react\"\nimport Signuplink from \"./signuplink\"\nimport Logedinlink from \"./logedinlink\"\n\n\nconst Navbar = ()=>{\n    return(\n        <div>\n            <h1>Handloom</h1>\n            <Signuplink />\n            <Logedinlink />\n        </div>\n    )\n}\n\nexport default Navbar","import React from \"react\"\n\n\n\nconst Hotellists = ()=>{\n    return(\n        <div>\n            <h1>hotel 1</h1>\n            <h1>hotel 2</h1>\n\n        </div>\n    )\n}\n\nexport default Hotellists","import React from 'react';\nimport Hotellists from './hotellists'\nclass hotels extends React.Component {\n   render(){\n      return (\n         <div>\n            <h1>list of hotels near you:</h1>\n            <Hotellists/>\n         </div>\n      );\n\n   }\n}\n\nexport default hotels;","import React from 'react';\n\nclass Itemsummary extends React.Component {\n   render(){\n      return (\n         <div>\n            <h6>item summary</h6>\n  \n         </div>\n      );\n\n   }\n}\n\nexport default Itemsummary;","import React from 'react';\nimport Itemsummary from './itemsummary';\n\nclass Itemlist extends React.Component {\n   render(){\n      return (\n         <div>\n            <h3>here is all item list</h3>\n            <Itemsummary />\n         </div>\n      );\n\n   }\n}\n\nexport default Itemlist;","import React from 'react'\nimport Itemlist from '../comonents/item/itemlist'\nconst Restaurant=(props)=> {\n   console.log(props);\n   return (\n      <div>\n         <h1>this is indivisual restourant:</h1>\n         <Itemlist />\n      </div>\n   )\n}\n\nexport default Restaurant\n","import React from 'react'\n\nclass Form extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: ''};\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n        console.log(this.state);\n    }\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input type='text' value= {this.state.value} onChange={this.handleChange} />\n                <input type='submit' value=\"submit\" />\n            </form>\n        )\n    }\n}\n\nexport default Form","import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './comonents/layout/navbar'\nimport Hotels from './comonents/dashboard/hotels';\nimport Restaurant from './pages/restaurant';\nimport Form from './pages/form';\n\n\nfunction App() {\n  return (\n    <>\n    <BrowserRouter>\n    <div className=\"App\">\n      <Navbar />\n      <div>\n        <Link to=\"/restaurant\">Rest</Link><br></br>\n        <Link to=\"/\">Home</Link>\n\n      </div>\n\n      <Switch>\n        <Route exact path=\"/\" component={Hotels} />\n        <Route exact path=\"/form\" component={Form} />\n        <Route path=\"/restaurant/:id\" component={Restaurant} />\n\n      </Switch>\n\n    </div>\n    </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}